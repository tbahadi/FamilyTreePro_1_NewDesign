// <auto-generated />
using System;
using FamilyTreePro.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamilyTreePro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251027072115_InitialCreateWithModifiedDate")]
    partial class InitialCreateWithModifiedDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("FamilyTreePro.Models.CombinedTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CombinedTrees");
                });

            modelBuilder.Entity("FamilyTreePro.Models.CombinedTreeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CombinedTreeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConnectionPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FamilyTreeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CombinedTreeId");

                    b.HasIndex("ConnectionPersonId");

                    b.HasIndex("FamilyTreeId");

                    b.ToTable("CombinedTreeItems");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FamilyTreePro.Models.FamilyTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConnectionPersonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDataIndependent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTreeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionPersonId");

                    b.HasIndex("CountryID");

                    b.HasIndex("ParentTreeId");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyTrees");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionReason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("FamilyTreeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FatherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GrandFatherName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsConnectionPoint")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOriginalRecord")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MotherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OriginalTreeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FamilyTreeId");

                    b.HasIndex("FatherId");

                    b.HasIndex("MotherId");

                    b.HasIndex("OccupationId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FamilyTreePro.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FamilyTreePro.Models.CombinedTree", b =>
                {
                    b.HasOne("FamilyTreePro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FamilyTreePro.Models.CombinedTreeItem", b =>
                {
                    b.HasOne("FamilyTreePro.Models.CombinedTree", "CombinedTree")
                        .WithMany("CombinedTrees")
                        .HasForeignKey("CombinedTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyTreePro.Models.Person", "ConnectionPerson")
                        .WithMany()
                        .HasForeignKey("ConnectionPersonId");

                    b.HasOne("FamilyTreePro.Models.FamilyTree", "FamilyTree")
                        .WithMany()
                        .HasForeignKey("FamilyTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CombinedTree");

                    b.Navigation("ConnectionPerson");

                    b.Navigation("FamilyTree");
                });

            modelBuilder.Entity("FamilyTreePro.Models.FamilyTree", b =>
                {
                    b.HasOne("FamilyTreePro.Models.Person", "ConnectionPerson")
                        .WithMany()
                        .HasForeignKey("ConnectionPersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FamilyTreePro.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyTreePro.Models.FamilyTree", "ParentTree")
                        .WithMany("ChildTrees")
                        .HasForeignKey("ParentTreeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FamilyTreePro.Models.User", "User")
                        .WithMany("FamilyTrees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionPerson");

                    b.Navigation("Country");

                    b.Navigation("ParentTree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Person", b =>
                {
                    b.HasOne("FamilyTreePro.Models.Country", "Country")
                        .WithMany("Persons")
                        .HasForeignKey("CountryId");

                    b.HasOne("FamilyTreePro.Models.FamilyTree", "FamilyTree")
                        .WithMany("Persons")
                        .HasForeignKey("FamilyTreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyTreePro.Models.Person", "Father")
                        .WithMany("Children")
                        .HasForeignKey("FatherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FamilyTreePro.Models.Person", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("FamilyTreePro.Models.Occupation", "Occupation")
                        .WithMany("Persons")
                        .HasForeignKey("OccupationId");

                    b.Navigation("Country");

                    b.Navigation("FamilyTree");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("FamilyTreePro.Models.CombinedTree", b =>
                {
                    b.Navigation("CombinedTrees");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Country", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("FamilyTreePro.Models.FamilyTree", b =>
                {
                    b.Navigation("ChildTrees");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Occupation", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("FamilyTreePro.Models.Person", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("FamilyTreePro.Models.User", b =>
                {
                    b.Navigation("FamilyTrees");
                });
#pragma warning restore 612, 618
        }
    }
}
