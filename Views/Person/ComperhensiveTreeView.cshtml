@{
    ViewData["Title"] = "الشجرة العائلية - العرض المتكامل";
    var familyTreeId = ViewBag.FamilyTreeId;
    var familyTreeName = ViewBag.FamilyTreeName ?? "شجرة عائلية";
    var personsCount = ViewBag.PersonsCount ?? 0;
    var personsJson = ViewBag.PersonsJson ?? "[]";
}

@if (personsCount == 0)
{
    <div class="container-fluid mt-4" dir="rtl">
        <div class="alert alert-info text-center">
            <h4>ℹ️ لا توجد بيانات</h4>
            <p>لم يتم إضافة أي أفراد إلى هذه الشجرة العائلية بعد.</p>
            <a href="@Url.Action("Create", "Person", new { familyTreeId = familyTreeId })" class="btn btn-primary">
                <i class="fas fa-plus"></i> إضافة أول فرد
            </a>
        </div>
    </div>
    return;
}

<!-- إضافة خطوط عربية من Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Amiri:wght@400;700&family=El+Messiri:wght@400;700&family=Tajawal:wght@400;700&family=Lateef&family=Reem+Kufi&family=Scheherazade+New&family=Noto+Naskh+Arabic&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container-fluid mt-4" dir="rtl">
    <div class="text-center mb-4">
        <h2 class="text-primary">@familyTreeName</h2>
        <p class="text-muted">عدد الأفراد: @personsCount</p>
    </div>

    <!-- شريط التحكم الرئيسي -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row g-3 align-items-center">
                <!-- اختيار نمط العرض -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">📊 نمط العرض:</label>
                    <select id="viewStyle" class="form-select">
                        <option value="leaf">🌿 الشجرة الورقية</option>
                        <option value="card">🃏 البطاقات</option>
                    </select>
                </div>

                <!-- اختيار الخط -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">🔤 الخط:</label>
                    <select id="fontSelector" class="form-select">
                        <option value="Tajawal">Tajawal - واضح</option>
                        <option value="Amiri">Amiri - كلاسيكي</option>
                        <option value="El Messiri">El Messiri - عصري</option>
                        <option value="Lateef">Lateef - أنيق</option>
                        <option value="Reem Kufi">Reem Kufi - زخرفي</option>
                        <option value="Scheherazade New">Scheherazade - تقليدي</option>
                        <option value="Noto Naskh Arabic">Noto Arabic - حديث</option>
                    </select>
                </div>

                <!-- خيارات العرض - محسّن -->
                <div class="col-md-2">
                    <label class="form-label fw-bold">⚙️ خيارات العرض:</label>
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="showFullName" checked>
                        <label class="form-check-label" for="showFullName">
                            <span id="nameDisplayText">الاسم الكامل</span>
                        </label>
                    </div>
                    <small class="text-muted" id="nameDisplayDesc">يعرض: محمد أحمد علي</small>

                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" id="colorfulMode" checked>
                        <label class="form-check-label" for="colorfulMode">النمط الملوّن</label>
                    </div>
                </div>

                <!-- خيارات متقدمة -->
                <div class="col-md-3">
                    <label class="form-label fw-bold">🔍 خيارات متقدمة:</label>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="showConnections" checked>
                        <label class="form-check-label" for="showConnections">إظهار الروابط</label>
                    </div>
                    
                    <div class="form-check form-switch mb-2">
                        <input class="form-check-input" type="checkbox" id="showPhotos" checked>
                        <label class="form-check-label" for="showPhotos">إظهار الصور</label>
                    </div>
                    
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="animateTree" checked>
                        <label class="form-check-label" for="animateTree">الحركات المتحركة</label>
                    </div>
                </div>

                <!-- أزرار التصدير -->
                <div class="col-md-3">
                    <label class="form-label fw-bold">📤 تصدير:</label>
                    <div class="btn-group w-100">
                        <button id="exportPdf" class="btn btn-danger">
                            <i class="fas fa-file-pdf me-1"></i> PDF
                        </button>
                        <button id="exportImage" class="btn btn-success">
                            <i class="fas fa-image me-1"></i> صورة
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- أزرار التحكم الإضافية -->
    <div class="text-center mb-3">
        <div class="btn-group" role="group">
            <!-- التحكم بالتكبير -->
            <button id="zoomIn" class="btn btn-outline-primary" title="تكبير">
                <i class="fas fa-search-plus"></i>
            </button>
            <button id="zoomOut" class="btn btn-outline-primary" title="تصغير">
                <i class="fas fa-search-minus"></i>
            </button>
            <button id="resetZoom" class="btn btn-outline-secondary" title="إعادة الضبط">
                <i class="fas fa-sync-alt"></i>
            </button>

            <!-- توسيط الشجرة -->
            <button id="centerTree" class="btn btn-outline-info" title="توسيط الشجرة">
                <i class="fas fa-crosshairs"></i>
            </button>

            <!-- تبديل النمط السريع -->
            <button id="quickToggle" class="btn btn-outline-warning">
                <i class="fas fa-palette"></i> تبديل النمط
            </button>

            <!-- 🔥 زر تبديل عرض الاسم السريع -->
            <button id="toggleNameQuick" class="btn btn-outline-info" title="تبديل عرض الاسم">
                <i class="fas fa-user-tag me-1"></i>
                <span id="nameToggleText">الاسم الأول</span>
            </button>
        </div>
    </div>

    <!-- حاوية الشجرة -->
    <div id="tree-container" style="width: 100%; height: 800px; border: 2px solid #e9ecef; border-radius: 15px; background: linear-gradient(135deg, #f8f9fa, #e9ecef); overflow: auto; position: relative;">

        <!-- نمط الشجرة الورقية -->
        <div id="leaf-view" style="display: block;">
            <div id="canvas-wrapper" style="position: relative; width: 4000px; height: 3000px; transform-origin: 0 0;">
                <canvas id="tree-canvas" width="4000" height="3000" style="position: absolute; top: 0; left: 0;"></canvas>
                <div id="clickable-areas" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></div>
            </div>
        </div>

        <!-- نمط البطاقات -->
        <div id="card-view" style="display: none;">
            <div id="cards-wrapper" style="position: relative; width: 4000px; height: 3000px; transform-origin: 0 0;">
                <!-- سيتم إضافة البطاقات والخطوط هنا -->
            </div>
            <!-- SVG للخطوط -->
            <svg id="connections-svg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 1;"></svg>
        </div>
    </div>

    <!-- الكارت الجانبي للمعلومات -->
    <div id="node-info" class="card mt-3 shadow-lg" style="display: none; position: fixed; top: 80px; right: 20px; width: 400px; z-index: 999; max-height: 80vh; overflow-y: auto;">
        <div class="card-header bg-primary text-white">
            <h6 class="mb-0">معلومات العضو</h6>
            <button type="button" class="btn-close btn-close-white float-start" onclick="$('#node-info').fadeOut();"></button>
        </div>
        <div class="card-body"></div>
    </div>
</div>

<!-- نافذة التحميل -->
<div id="loading" class="loading-overlay" style="display: none;">
    <div class="loading-content text-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div>
        <div class="mt-3 fs-5">جاري التصدير...</div>
    </div>
</div>

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.7);
        z-index: 9999;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #tree-container {
        cursor: grab;
        transition: all 0.3s ease;
    }

        #tree-container:active {
            cursor: grabbing;
        }

    /* أنماط الشجرة الورقية */
    .leaf-node {
        position: absolute;
        width: 240px;
        height: 170px;
        cursor: pointer;
        z-index: 10;
        border-radius: 50%;
        transition: all 0.3s ease;
        filter: drop-shadow(0 4px 8px rgba(0,0,0,0.2));
    }

        .leaf-node:hover {
            transform: scale(1.15);
            filter: drop-shadow(0 6px 12px rgba(0,0,0,0.3));
        }

    /* أنماط البطاقات */
    .tree-node {
        position: absolute;
        min-width: 200px;
        max-width: 280px;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        text-align: center;
        cursor: pointer;
        word-wrap: break-word;
        z-index: 20;
        transition: all 0.3s ease;
        border: 2px solid transparent;
        transform-origin: center;
    }

        .tree-node.male {
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            border-color: #1976d2;
        }

        .tree-node.female {
            background: linear-gradient(135deg, #fce4ec, #f8bbd9);
            border-color: #c2185b;
        }

        .tree-node:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        }

    .node-name {
        font-weight: bold;
        font-size: 16px;
        margin-bottom: 8px;
        line-height: 1.3;
    }

    .node-details {
        font-size: 12px;
        opacity: 0.9;
        line-height: 1.4;
    }

    /* الخطوط في نمط البطاقات */
    .card-connection-line {
        position: absolute;
        height: 3px;
        background: linear-gradient(90deg, #666, #999);
        transform-origin: 0 0;
        z-index: 10;
        pointer-events: none;
    }

    /* تأثيرات للكارت الجانبي */
    #node-info {
        animation: slideInRight 0.4s ease;
    }

    @@keyframes slideInRight {
        from {
            opacity: 0;
            transform: translateX(50px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    /* تخصيص شريط التمرير */
    #tree-container::-webkit-scrollbar {
        width: 12px;
        height: 12px;
    }

    #tree-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    #tree-container::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 10px;
    }

        #tree-container::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }

    /* تطبيق الخطوط على جميع العناصر */
    .arabic-font {
        font-family: 'Tajawal', sans-serif;
    }

    /* تخصيص form-switch */
    .form-switch .form-check-input {
        width: 3em;
        height: 1.5em;
    }

    /* أنماط للصور والعلامات */
    .profile-image {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }

    .badge-founder {
        background: linear-gradient(135deg, #ffd700, #ffa500);
        color: #000;
        font-weight: bold;
    }

    .badge-connection {
        background: linear-gradient(135deg, #4facfe, #00f2fe);
        color: white;
    }

    /* تحسينات للكارت الجانبي */
    #node-info .card-body {
        max-height: 70vh;
        overflow-y: auto;
    }

    /* أنيميشن للخطوط */
    @@keyframes drawLine {
        from {
            stroke-dashoffset: 1000;
        }
        to {
            stroke-dashoffset: 0;
        }
    }

    .connection-line {
        stroke-dasharray: 1000;
        stroke-dashoffset: 1000;
        animation: drawLine 1.5s ease-out forwards;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

@section Scripts {
    <script>
        // البيانات والإعدادات
        const personsJson = '@Html.Raw(personsJson)';
        const familyTreeId = @familyTreeId;
        const familyTreeName = '@familyTreeName';
        const personsCount = @personsCount;

        let treeData = [];
        let currentView = 'leaf'; // 'leaf' or 'card'
        let colorfulMode = true;
        let showFullName = true;
        let currentFontFamily = 'Tajawal';
        let scale = 1.0;
        const minScale = 0.3;
        const maxScale = 3.0;
        
        // إعدادات متقدمة
        let showConnections = true;
        let showPhotos = true;
        let animateTree = true;

        // عناصر DOM
        const canvas = document.getElementById('tree-canvas');
        const ctx = canvas.getContext('2d');
        const cardsWrapper = document.getElementById('cards-wrapper');

        // الخطوط المتاحة مع تطبيق CSS الفعلي
        const availableFonts = {
            'Tajawal': 'Tajawal, sans-serif',
            'Amiri': 'Amiri, serif',
            'El Messiri': 'El Messiri, sans-serif',
            'Lateef': 'Lateef, serif',
            'Reem Kufi': 'Reem Kufi, sans-serif',
            'Scheherazade New': 'Scheherazade New, serif',
            'Noto Naskh Arabic': 'Noto Naskh Arabic, serif'
        };

        // 🔥 دالة تحديث واجهة عرض الاسم
        function updateNameDisplayUI() {
            const nameToggleText = showFullName ? 'الاسم الأول' : 'الاسم الكامل';
            const nameDisplayText = showFullName ? 'الاسم الكامل' : 'الاسم الأول';
            const nameDisplayDesc = showFullName ? 'يعرض: محمد أحمد علي' : 'يعرض: محمد';

            $('#nameToggleText').text(nameToggleText);
            $('#nameDisplayText').text(nameDisplayText);
            $('#nameDisplayDesc').text(nameDisplayDesc);
        }

        // 🔥 تطبيق الخط على جميع العناصر
        function applyFontToAllElements() {
            const fontFamily = availableFonts[currentFontFamily];

            // تطبيق الخط على البطاقات
            $('.tree-node').css('font-family', fontFamily);

            // تطبيق الخط على الشجرة الورقية (سيتم تطبيقه عند إعادة الرسم)
            if (currentView === 'leaf') {
                drawLeafTree();
            }

            // تطبيق الخط على الكارت الجانبي
            $('#node-info').css('font-family', fontFamily);

            // تطبيق الخط على عناصر التحكم
            $('.form-label, .form-check-label, .btn').css('font-family', fontFamily);
        }

        // 🔥 دالة استخراج الاسم الأول
        function getFirstName(fullName) {
            if (!fullName) return 'غير معروف';
            const nameParts = fullName.trim().split(' ');
            return nameParts[0] || fullName;
        }

        // 🔥 دالة الحصول على الاسم للعرض
        function getDisplayName(person) {
            const fullName = person.fullName || 'غير معروف';
            return showFullName ? fullName : getFirstName(fullName);
        }

        // تحميل البيانات
        function loadRealData() {
            try {
                if (personsJson && personsJson !== '[]') {
                    treeData = JSON.parse(personsJson);
                    return true;
                }
                return false;
            } catch (e) {
                console.error('خطأ في تحميل البيانات:', e);
                return false;
            }
        }

        // ========== دوال مساعدة ==========
        function formatDate(dateString) {
            try {
                if (!dateString) return '';
                const date = new Date(dateString);
                return isNaN(date.getTime()) ? dateString : date.toLocaleDateString('ar-EG');
            } catch (e) {
                return dateString;
            }
        }

        function escapeHtml(unsafe) {
            if (!unsafe) return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // دالة محسنة لتنظيم الأجيال
        function organizeByGenerations(persons) {
            const generations = [];
            const processed = new Set();

            // البدء بالمؤسسين أولاً
            const founders = persons.filter(person => person.isFounder);
            if (founders.length > 0) {
                generations.push(founders);
                founders.forEach(founder => processed.add(founder.id));
            }

            // ثم الأجداد بدون آباء
            const firstGen = persons.filter(person => !person.fatherId && !processed.has(person.id));
            if (firstGen.length > 0) {
                generations.push(firstGen);
                firstGen.forEach(person => processed.add(person.id));
            }

            let currentGen = [...firstGen, ...founders];
            
            while (currentGen.length > 0) {
                const nextGen = [];
                currentGen.forEach(person => {
                    const children = persons.filter(p => 
                        (p.fatherId === person.id || p.motherId === person.id) && 
                        !processed.has(p.id)
                    );
                    children.forEach(child => {
                        nextGen.push(child);
                        processed.add(child.id);
                    });
                });
                
                if (nextGen.length > 0) {
                    generations.push(nextGen);
                }
                currentGen = nextGen;
            }

            // إضافة أي أفراد لم تتم معالجتهم (للحالات الخاصة)
            const unprocessed = persons.filter(p => !processed.has(p.id));
            if (unprocessed.length > 0) {
                generations.push(unprocessed);
            }

            return generations;
        }

        // ========== نمط الشجرة الورقية ==========
        function drawLeafTree() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            const container = $('#clickable-areas');
            container.empty();

            if (treeData.length === 0) return;

            const generations = organizeByGenerations(treeData);
            const containerWidth = 4000;
            const startY = 200;
            const verticalSpacing = 280;

            generations.forEach((generation, genIndex) => {
                const generationY = startY + (genIndex * verticalSpacing);
                const generationSize = generation.length;
                const horizontalSpacing = Math.min(320, (containerWidth - 200) / Math.max(1, generationSize));
                const totalWidth = generationSize * horizontalSpacing;
                const startX = (containerWidth - totalWidth) / 2;

                // كتابة اسم الجيل
                ctx.fillStyle = '#555';
                ctx.font = `bold 16px ${availableFonts[currentFontFamily]}`;
                ctx.textAlign = 'left';
                ctx.fillText(`الجيل ${genIndex + 1}`, 50, generationY - 40);

                generation.forEach((person, personIndex) => {
                    const personX = startX + (personIndex * horizontalSpacing);
                    const personY = generationY;
                    person.canvasX = personX;
                    person.canvasY = personY;

                    drawLeaf(personX, personY, 1.3, person);

                    // إضافة منطقة قابلة للنقر
                    const clickableDiv = $(`
                        <div class="leaf-node"
                             data-person-id="${person.id}"
                             style="left: ${personX - 120}px; top: ${personY - 85}px;">
                        </div>
                    `);
                    clickableDiv.on('click', function(e) {
                        e.stopPropagation();
                        showPersonDetails(person);
                    });
                    container.append(clickableDiv);
                });
            });

            if (showConnections) {
                setTimeout(drawLeafConnections, 100);
            }
        }

        function drawLeaf(x, y, scale, person) {
            ctx.save();
            ctx.translate(x, y);
            ctx.scale(scale, scale);

            let fillStyle, strokeStyle = '#333';
            if (colorfulMode) {
                if (person.gender === 'Male') {
                    const grad = ctx.createLinearGradient(-120, -90, 120, 90);
                    grad.addColorStop(0, '#a8e6cf');
                    grad.addColorStop(1, '#56ab2f');
                    fillStyle = grad;
                } else {
                    const grad = ctx.createLinearGradient(-120, -90, 120, 90);
                    grad.addColorStop(0, '#ffd1dc');
                    grad.addColorStop(1, '#e91e63');
                    fillStyle = grad;
                }
            } else {
                fillStyle = '#ffffff';
                strokeStyle = '#000000';
            }

            // رسم الورقة
            ctx.beginPath();
            ctx.moveTo(120, 0);
            ctx.bezierCurveTo(70, -80, -70, -80, -120, 0);
            ctx.bezierCurveTo(-70, 80, 70, 80, 120, 0);
            ctx.closePath();

            ctx.fillStyle = fillStyle;
            ctx.fill();
            ctx.strokeStyle = strokeStyle;
            ctx.lineWidth = colorfulMode ? 1.5 : 2;
            ctx.stroke();

            // كتابة الاسم مع الخط المحدد
            const displayName = getDisplayName(person);
            ctx.fillStyle = colorfulMode ? '#fff' : '#000';
            ctx.font = `bold 18px ${availableFonts[currentFontFamily]}`;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';

            if (showFullName && displayName.length > 15) {
                const words = displayName.split(' ');
                const mid = Math.ceil(words.length / 2);
                const firstLine = words.slice(0, mid).join(' ');
                const secondLine = words.slice(mid).join(' ');
                ctx.fillText(firstLine, 0, -10);
                ctx.fillText(secondLine, 0, 15);
            } else {
                ctx.fillText(displayName, 0, 0);
            }

            ctx.restore();
        }

        function drawLeafConnections() {
            treeData.forEach(person => {
                if (person.fatherId) {
                    const father = treeData.find(p => p.id === person.fatherId);
                    if (father && father.canvasX && father.canvasY && person.canvasX && person.canvasY) {
                        drawBranch(father.canvasX, father.canvasY + 50, person.canvasX, person.canvasY - 50);
                    }
                }
            });
        }

        function drawBranch(x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + 30, y1 + 8, x2 - 30, y2 - 8, x2, y2);
            ctx.strokeStyle = '#5a7b4f';
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        // ========== نمط البطاقات - الإصدار المحسّن ==========
        function initializeSVG() {
            const svg = $('#connections-svg');
            svg.empty();

            const defs = $(`
                <defs>
                    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#666"/>
                    </marker>
                    <marker id="arrowhead-male" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#1976d2"/>
                    </marker>
                    <marker id="arrowhead-female" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                        <polygon points="0 0, 10 3.5, 0 7" fill="#c2185b"/>
                    </marker>
                </defs>
            `);
            svg.append(defs);
        }

        function drawCardTree() {
            const container = $('#cards-wrapper');
            container.empty();

            if (treeData.length === 0) return;

            initializeSVG();
            const generations = organizeByGenerations(treeData);
            const containerWidth = 4000;
            const startY = 100;
            const verticalSpacing = 200;

            // أولاً: رسم البطاقات
            generations.forEach((generation, genIndex) => {
                const generationY = startY + (genIndex * verticalSpacing);
                const generationSize = generation.length;
                const horizontalSpacing = Math.min(300, (containerWidth - 200) / Math.max(1, generationSize));
                const totalWidth = generationSize * horizontalSpacing;
                const startX = (containerWidth - totalWidth) / 2;

                generation.forEach((person, personIndex) => {
                    const personX = startX + (personIndex * horizontalSpacing);
                    const personY = generationY;

                    // حفظ المواقع الأصلية
                    person.originalX = personX;
                    person.originalY = personY;
                    person.scaledX = personX * scale;
                    person.scaledY = personY * scale;

                    createCardNode(person, personX, personY, container);
                });
            });

            // ثانياً: رسم الخطوط بعد البطاقات
            if (showConnections) {
                setTimeout(drawCardConnections, 50);
            }
        }

        function createCardNode(person, x, y, container) {
            const birthDate = person.birthDate ? new Date(person.birthDate).toLocaleDateString('ar-EG') : '';
            const city = person.city || '';
            const occupationName = person.occupationName || '';
            const gender = person.gender || 'Male';
            const displayName = getDisplayName(person);

            const nodeContent = `
                <div class="tree-node ${gender === 'Male' ? 'male' : 'female'}"
                     data-person-id="${person.id}"
                     data-original-x="${x}"
                     data-original-y="${y}"
                     style="left: ${x}px; top: ${y}px; font-family: ${availableFonts[currentFontFamily]} !important;">
                    <div class="node-name">${displayName}</div>
                    <div class="node-details">
                        ${birthDate ? '📅 ' + birthDate + '<br>' : ''}
                        ${city ? '🏙️ ' + city + '<br>' : ''}
                        ${occupationName ? '💼 ' + occupationName : ''}
                    </div>
                </div>
            `;

            const $node = $(nodeContent);
            $node.on('click', function(e) {
                e.stopPropagation();
                showPersonDetails(person);
            });
            container.append($node);
        }

        function drawCardConnections() {
            // إزالة الخطوط القديمة أولاً
            $('.card-connection-line, .connection-path').remove();

            treeData.forEach(person => {
                if (person.fatherId) {
                    const father = treeData.find(p => p.id === person.fatherId);
                    if (father && father.originalX && father.originalY && person.originalX && person.originalY) {

                        // حساب نقاط البداية والنهاية للخط
                        const fromX = father.originalX + 100; // منتصف الأب
                        const fromY = father.originalY + 60;  // أسفل الأب
                        const toX = person.originalX + 100;   // منتصف الابن
                        const toY = person.originalY - 10;    // أعلى الابن

                        // حساب طول وزاوية الخط
                        const dx = toX - fromX;
                        const dy = toY - fromY;
                        const length = Math.sqrt(dx * dx + dy * dy);
                        const angle = Math.atan2(dy, dx) * 180 / Math.PI;

                        // لون الخط حسب الجنس
                        const lineColor = person.gender === 'Male' ? '#1976d2' : '#c2185b';

                        // إنشاء الخط المستقيم
                        const lineHTML = `
                            <div class="card-connection-line"
                                 data-connection="true"
                                 style="left: ${fromX}px;
                                        top: ${fromY}px;
                                        width: ${length}px;
                                        background: ${lineColor};
                                        transform: rotate(${angle}deg);
                                        z-index: 10;">
                            </div>
                        `;

                        $('#cards-wrapper').append(lineHTML);
                    }
                }
            });
        }

        // ========== دالة عرض التفاصيل المحسنة ==========
        function showPersonDetails(person) {
            const birthDate = formatDate(person.birthDate);
            const deathDate = formatDate(person.deathDate);
            const marriageDate = formatDate(person.marriageDate);
            const city = person.city || '';
            const occupationName = person.occupationName || '';
            const countryName = person.countryName || '';
            const educationLevel = person.educationLevel || '';
            const spouseName = person.spouseName || '';
            const socialStatus = person.socialStatus || '';
            const birthPlace = person.birthPlace || '';
            const deathPlace = person.deathPlace || '';
            const biography = person.biography || '';

            let details = '';
            if (birthDate) details += `📅 الميلاد: ${birthDate}<br>`;
            if (birthPlace) details += `📍 مكان الميلاد: ${birthPlace}<br>`;
            if (deathDate) details += `⚰️ الوفاة: ${deathDate}<br>`;
            if (deathPlace) details += `📍 مكان الوفاة: ${deathPlace}<br>`;
            if (city) details += `🏙️ المدينة: ${city}<br>`;
            if (countryName) details += `🌍 الدولة: ${countryName}<br>`;
            if (occupationName) details += `💼 المهنة: ${occupationName}<br>`;
            if (educationLevel) details += `🎓 المستوى التعليمي: ${educationLevel}<br>`;
            if (spouseName) details += `💑 اسم الزوج/الزوجة: ${spouseName}<br>`;
            if (marriageDate) details += `💒 تاريخ الزواج: ${marriageDate}<br>`;
            if (socialStatus) details += `👨‍👩‍👧‍👦 الحالة الاجتماعية: ${socialStatus}<br>`;
            if (person.childrenCount > 0) details += `👶 عدد الأبناء: ${person.childrenCount}<br>`;
            if (biography) details += `📖 السيرة: ${biography}<br>`;
            
            if (!details) details = 'لا توجد معلومات إضافية';

            $('#node-info .card-body').html(`
                <div class="text-center mb-3">
                    ${person.profilePicture && showPhotos ? 
                        `<img src="${person.profilePicture}" class="profile-image mb-2" alt="صورة الشخص">` 
                        : ''}
                    <h5 class="fw-bold text-primary">${person.fullName || 'غير معروف'}</h5>
                    <small class="text-muted">${getFirstName(person.fullName)}</small>
                    ${person.isFounder ? '<br><span class="badge badge-founder mt-1">👑 مؤسس الشجرة</span>' : ''}
                    ${person.isConnectionPoint ? '<br><span class="badge badge-connection mt-1">🔗 نقطة اتصال</span>' : ''}
                </div>
                <p>${details}</p>
                <div class="mt-4 d-grid gap-2">
                    <a href="/Person/Details/${person.id}" class="btn btn-info btn-sm">
                        <i class="fas fa-eye me-1"></i> تفاصيل كاملة
                    </a>
                    <a href="/Person/Edit/${person.id}" class="btn btn-warning btn-sm">
                        <i class="fas fa-edit me-1"></i> تعديل البيانات
                    </a>
                    <a href="/Person/Create?familyTreeId=${familyTreeId}&fatherId=${person.id}" class="btn btn-success btn-sm">
                        <i class="fas fa-plus me-1"></i> إضافة ابن
                    </a>
                    ${person.motherId ? 
                        `<a href="/Person/Create?familyTreeId=${familyTreeId}&motherId=${person.id}" class="btn btn-secondary btn-sm">
                            <i class="fas fa-plus me-1"></i> إضافة من الأم
                        </a>` 
                        : ''}
                </div>
            `);
            $('#node-info').fadeIn(200);
        }

        // ========== التحكم بالعرض ==========
        function switchView(viewType) {
            currentView = viewType;

            if (viewType === 'leaf') {
                $('#leaf-view').show();
                $('#card-view').hide();
                drawLeafTree();
            } else {
                $('#leaf-view').hide();
                $('#card-view').show();
                drawCardTree();
                // 🔥 تطبيق الخط فوراً عند التبديل للنمط
                applyFontToAllElements();
            }
        }

        function updateSettings() {
            showFullName = $('#showFullName').is(':checked');
            colorfulMode = $('#colorfulMode').is(':checked');
            currentFontFamily = $('#fontSelector').val();

            // 🔥 تحديث واجهة عرض الاسم
            updateNameDisplayUI();

            // 🔥 تطبيق الخط أولاً
            applyFontToAllElements();

            // ثم إعادة الرسم حسب النمط الحالي
            if (currentView === 'leaf') {
                drawLeafTree();
            } else {
                drawCardTree();
            }
        }

        // تحديث الإعدادات المتقدمة
        function updateAdvancedSettings() {
            showConnections = $('#showConnections').is(':checked');
            showPhotos = $('#showPhotos').is(':checked');
            animateTree = $('#animateTree').is(':checked');
            
            if (currentView === 'leaf') {
                drawLeafTree();
            } else {
                drawCardTree();
            }
        }

        // ========== التكبير والتصغير ==========
        function zoomIn() {
            if (scale < maxScale) {
                scale += 0.1;
                applyZoom();
            }
        }

        function zoomOut() {
            if (scale > minScale) {
                scale -= 0.1;
                applyZoom();
            }
        }

        function resetZoom() {
            scale = 1.0;
            applyZoom();
        }

        function applyZoom() {
            // تطبيق التكبير على wrapper بالكامل
            $('#canvas-wrapper, #cards-wrapper').css('transform', `scale(${scale})`);

            // في نمط البطاقات، نعيد رسم الخطوط لتتكيف مع التكبير
            if (currentView === 'card') {
                // إعادة حساب المواقع مع التكبير
                treeData.forEach(person => {
                    if (person.originalX && person.originalY) {
                        person.scaledX = person.originalX * scale;
                        person.scaledY = person.originalY * scale;
                    }
                });

                // إعادة رسم الخطوط
                if (showConnections) {
                    setTimeout(drawCardConnections, 10);
                }
            }
        }

        function centerTree() {
            const container = $('#tree-container');
            const wrapper = currentView === 'leaf' ? $('#canvas-wrapper') : $('#cards-wrapper');

            const centerX = (wrapper.width() * scale - container.width()) / 2;
            const centerY = (wrapper.height() * scale - container.height()) / 2;

            container.scrollLeft(centerX);
            container.scrollTop(centerY);
        }

        // ========== التصدير ==========
        function showLoading(show) {
            $('#loading').css('display', show ? 'flex' : 'none');
        }

        function exportToPdf() {
            showLoading(true);

            const element = currentView === 'leaf' ? document.getElementById("canvas-wrapper") : document.getElementById("cards-wrapper");

            // إعادة التعيين المؤقت للتكبير أثناء التصدير
            const originalScale = scale;
            scale = 1.0;
            $('#canvas-wrapper, #cards-wrapper').css('transform', 'scale(1)');

            setTimeout(() => {
                html2canvas(element, {
                    scale: 2,
                    useCORS: true,
                    backgroundColor: "#ffffff"
                }).then(canvas => {
                    const { jsPDF } = window.jspdf;
                    const pdf = new jsPDF('l', 'mm', 'a4');
                    const pdfWidth = pdf.internal.pageSize.getWidth();
                    const pdfHeight = pdf.internal.pageSize.getHeight();

                    const imgWidth = canvas.width;
                    const imgHeight = canvas.height;
                    const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight) * 0.95;

                    pdf.addImage(canvas, 'JPEG',
                        (pdfWidth - imgWidth * ratio) / 2,
                        (pdfHeight - imgHeight * ratio) / 2,
                        imgWidth * ratio,
                        imgHeight * ratio
                    );

                    pdf.setProperties({
                        title: familyTreeName,
                        subject: 'شجرة عائلية'
                    });

                    // 🔥 استخدام اسم الشجرة مع التاريخ
                    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
                    // تنظيف اسم الشجرة من الرموز غير المرغوبة
                    const cleanTreeName = familyTreeName.replace(/[^\w\u0600-\u06FF\s]/g, '_').replace(/\s+/g, '_');
                    const safeFileName = `${cleanTreeName}_${timestamp}.pdf`;

                    pdf.save(safeFileName);

                    // إعادة التكبير الأصلي
                    scale = originalScale;
                    $('#canvas-wrapper, #cards-wrapper').css('transform', `scale(${scale})`);
                    showLoading(false);
                }).catch(error => {
                    console.error('خطأ في التصدير:', error);
                    scale = originalScale;
                    $('#canvas-wrapper, #cards-wrapper').css('transform', `scale(${scale})`);
                    showLoading(false);
                    alert('حدث خطأ أثناء التصدير إلى PDF');
                });
            }, 500);
        }

        function exportToImage() {
            showLoading(true);

            const element = currentView === 'leaf' ? document.getElementById("canvas-wrapper") : document.getElementById("cards-wrapper");

            // إعادة التعيين المؤقت للتكبير أثناء التصدير
            const originalScale = scale;
            scale = 1.0;
            $('#canvas-wrapper, #cards-wrapper').css('transform', 'scale(1)');

            setTimeout(() => {
                html2canvas(element, {
                    scale: 2,
                    useCORS: true,
                    backgroundColor: "#ffffff"
                }).then(canvas => {
                    // 🔥 استخدام اسم الشجرة مع التاريخ
                    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
                    // تنظيف اسم الشجرة من الرموز غير المرغوبة
                    const cleanTreeName = familyTreeName.replace(/[^\w\u0600-\u06FF\s]/g, '_').replace(/\s+/g, '_');
                    const safeFileName = `${cleanTreeName}_${timestamp}.png`;

                    const link = document.createElement('a');
                    link.download = safeFileName;
                    link.href = canvas.toDataURL();
                    link.click();

                    // إعادة التكبير الأصلي
                    scale = originalScale;
                    $('#canvas-wrapper, #cards-wrapper').css('transform', `scale(${scale})`);
                    showLoading(false);
                }).catch(error => {
                    console.error('خطأ في التصدير:', error);
                    scale = originalScale;
                    $('#canvas-wrapper, #cards-wrapper').css('transform', `scale(${scale})`);
                    showLoading(false);
                    alert('حدث خطأ أثناء التصدير إلى صورة');
                });
            }, 500);
        }

        // ========== التهيئة والأحداث ==========
        function setupEventListeners() {
            // تبديل نمط العرض
            $('#viewStyle').on('change', function() {
                switchView($(this).val());
            });

            // تحديث الإعدادات
            $('#fontSelector, #showFullName, #colorfulMode').on('change', updateSettings);

            // تحديث الإعدادات المتقدمة
            $('#showConnections, #showPhotos, #animateTree').on('change', updateAdvancedSettings);

            // التصدير
            $('#exportPdf').on('click', exportToPdf);
            $('#exportImage').on('click', exportToImage);

            // التحكم بالتكبير
            $('#zoomIn').on('click', zoomIn);
            $('#zoomOut').on('click', zoomOut);
            $('#resetZoom').on('click', resetZoom);
            $('#centerTree').on('click', centerTree);

            // تبديل سريع للنمط
            $('#quickToggle').on('click', function() {
                colorfulMode = !colorfulMode;
                $('#colorfulMode').prop('checked', colorfulMode);
                updateSettings();
            });

            // 🔥 تبديل سريع لعرض الاسم
            $('#toggleNameQuick').on('click', function() {
                showFullName = !showFullName;
                $('#showFullName').prop('checked', showFullName);
                updateSettings();
            });

            // التحكم بالسحب
            const container = $('#tree-container');
            let panning = false;
            let startX, startY, scrollLeft, scrollTop;

            container.on('mousedown', function(e) {
                if ($(e.target).closest('.leaf-node, .tree-node').length === 0) {
                    panning = true;
                    startX = e.pageX - container.offset().left;
                    startY = e.pageY - container.offset().top;
                    scrollLeft = container.scrollLeft();
                    scrollTop = container.scrollTop();
                    container.css('cursor', 'grabbing');
                }
            });

            $(document).on('mouseup', function() {
                panning = false;
                container.css('cursor', 'grab');
            });

            container.on('mousemove', function(e) {
                if (!panning) return;
                e.preventDefault();
                const x = e.pageX - container.offset().left;
                const y = e.pageY - container.offset().top;
                container.scrollLeft(scrollLeft - (x - startX) * 2);
                container.scrollTop(scrollTop - (y - startY) * 2);
            });

            // التكبير بعجلة الماوس
            container.on('wheel', function(e) {
                e.preventDefault();
                const delta = e.originalEvent.deltaY;
                if (delta > 0) {
                    zoomOut();
                } else {
                    zoomIn();
                }
            });

            // إغلاق الكارت الجانبي
            $(document).on('click', function(e) {
                if (!$(e.target).closest('#node-info, .leaf-node, .tree-node').length) {
                    $('#node-info').fadeOut(200);
                }
            });
        }

        function initializePage() {
            if (loadRealData()) {
                // تحميل التفضيلات المحفوظة
                const savedFont = localStorage.getItem('selectedFont');
                if (savedFont && availableFonts[savedFont]) {
                    currentFontFamily = savedFont;
                    $('#fontSelector').val(savedFont);
                }

                const savedView = localStorage.getItem('preferredView');
                if (savedView) {
                    currentView = savedView;
                    $('#viewStyle').val(savedView);
                }

                // 🔥 تحديث واجهة عرض الاسم أولاً
                updateNameDisplayUI();

                // 🔥 تطبيق الخط فوراً عند التحميل
                applyFontToAllElements();

                // تطبيق الإعدادات الأولية
                switchView(currentView);
                setupEventListeners();
                centerTree();
            } else {
                $('#tree-container').html(`
                    <div class="alert alert-danger text-center" style="margin: 50px;">
                        <h4>❌ خطأ في تحميل البيانات</h4>
                        <p>حدث خطأ أثناء تحميل بيانات الشجرة العائلية.</p>
                    </div>
                `);
            }
        }

        // حفظ التفضيلات عند التغيير
        $('#viewStyle, #fontSelector').on('change', function() {
            localStorage.setItem('preferredView', currentView);
            localStorage.setItem('selectedFont', currentFontFamily);
        });

        // بدء التحميل
        $(document).ready(initializePage);
    </script>
}